 
#include <hidef.h>      /* common defines and macros */
#include "mc9s12dg256.h"      /* derivative-specific definitions */
#include <string.h>
#include <stdlib.h> 
#include <stdio.h> 
  
#define LCD_DATA PORTK
#define LCD_CTRL PORTK
#define RS 0x01
#define EN 0x02

void COMWRT4(unsigned char);
void DATWRT4(unsigned char);
void MSDelay(unsigned int);
void PRINT(char *);
void Temperature();
void Light();

void main(void)

{        
	    /*memory allocation to display strings on LCD*/
         char *light=(char *)malloc(20*sizeof(char));
         char *temp=(char *)malloc(20*sizeof(char));
         char *temp_grade=(char *)malloc(20*sizeof(char));
         char *light_lux= (char *)malloc(20*sizeof(char));

	    /*strings displyed on LCD*/
         light="Light:";
         temp="Temp:";
         temp_grade="grade C";
         light_lux="lux";
         
         
         
         
        //registers initialization
         ATD0CTL2=0x80;/*Normal ATD functionality*/
         ATD0CTL3=0x08;/*1 conversion per sequence,continue conversion*/
         ATD0CTL4=0xEB;/*8 bit resolution,*/
    
        
             
        DDRB=0xFF;
        DDRJ=0xFF;
        PTJ=0;
        DDRT=0xFF;
        DDRK = 0xFF;   
        COMWRT4(0x33);   //reset sequence provided by data sheet
        MSDelay(1);
        COMWRT4(0x32);   //reset sequence provided by data sheet
        MSDelay(1);
        COMWRT4(0x28);
        MSDelay(1);
        COMWRT4(0x06);  //entry mode set, increment, no shift
        MSDelay(1);
        COMWRT4(0x0E);  //Display set, disp on, cursor on, blink off
        MSDelay(1);
        COMWRT4(0x01);  //Clear display
        MSDelay(1);
        COMWRT4(0x80);  //set start posistion, home position
        MSDelay(1);
         
	     /*temperature and light data displayed on LCD*/
          for(;;){
          
          COMWRT4(0x80);  
          PRINT(temp);
          Temperature();
          COMWRT4(0x88);
          PRINT(temp_grade);
          MSDelay(1000);
          COMWRT4(0xC0);
          PRINT(light);
          Light();
          COMWRT4(0xCA);
          PRINT(light_lux);
          }
         
          
         
	
}


void Light(){

   int light,aux_light,i;
   ATD0CTL5=0x24;/*left just.,continuous conversion sequences,only one channel, analog input ch 4(AN4)*/
   
   
   while(!(ATD0STAT0 & 0x80)); //infinite loop until conversion sequence completed(AD0STAT0=SCF=0)  ---> 0 = Conversion sequence not completed
         if(ATD0STAT0 & 0x80){ // ATD0STAT0=SCF=1 = Conversion sequence has completed and calculate temperature
         
            
              ATD0STAT0=ATD0STAT0&0x80;
              COMWRT4(0xC6);
              light = ATD0DR0H; //stored data in local variable from resulted register
              aux_light=light;
              
              
              COMWRT4(0xC8);
              DATWRT4(light%10+'0');
              light=light/10;
              COMWRT4(0xC7);
              DATWRT4(light%10+'0');
              light=light/10;
              COMWRT4(0xC6);
              DATWRT4(light%10+'0');
              light=light/10;
              
              
              if(aux_light<50){
              
			     /*sound activation from board speaker*/
	                for(i=0;i<10;i++)
	                {
		                PTT = PTT | 0x20;      //make PT5=1
		                MSDelay(10);         
	                	PTT = PTT & 0xDF;      //Make PT5=0
	                	MSDelay(10);         

	                }			
              }
              
              
         }
}

void Temperature(){

  
   
   int temp; // resulted data stored in ATD0DR0H register after analog-digital conversion
   int measure_mv;  //correspondent of temp in milivolts
   int measure_celsius; //correspondent of measure_mv in grade Celsius
   ATD0CTL5=0x25;/*left just.,continuous conversion sequences,only one channel, analog input ch 5(AN5)*/

          
         while(!(ATD0STAT0 & 0x80)); //infinite loop until conversion sequence completed(AD0STAT0=SCF=0)  ---> 0 = Conversion sequence not completed
         if(ATD0STAT0 & 0x80){ // ATD0STAT0=SCF=1 = Conversion sequence has completed and calculate temperature
         
            
              ATD0STAT0=ATD0STAT0&0x80;   //---> ?
              COMWRT4(0x85);
              temp = ATD0DR0H; //stored data in local variable from resulted register
              
              //calculate with a formula the temperature
              measure_mv=temp*19;
              measure_celsius=((measure_mv/10)+2.5);
              
                         
              if(measure_celsius>28){
                DDRB = 0xFF;    //PORTB as output since LEDs are connected to it
                DDRJ = 0xFF;    //PTJ as output to control Dragon12+ LEDs
                PTJ=0x0;        //Allow the LEDs to display data on PORTB pins
                PORTB=0xFF;/*all LEDs are ON*/			
              }
              
              //print temperature on LCD
              COMWRT4(0x86);
              DATWRT4(measure_celsius%10+'0');
              measure_celsius=measure_celsius/10;
              COMWRT4(0x85);
              DATWRT4(measure_celsius%10+'0');
              
              
      
         
         
         }
         
}

  
void COMWRT4(unsigned char command)
  {
        unsigned char x;
        
        x = (command & 0xF0) >> 2;         //shift high nibble to center of byte for Pk5-Pk2
      LCD_DATA =LCD_DATA & ~0x3C;          //clear bits Pk5-Pk2
        LCD_DATA = LCD_DATA | x;          //sends high nibble to PORTK
        MSDelay(1);
        LCD_CTRL = LCD_CTRL & ~RS;         //set RS to command (RS=0)
        MSDelay(1);
        LCD_CTRL = LCD_CTRL | EN;          //rais enable
        MSDelay(5);
        LCD_CTRL = LCD_CTRL & ~EN;         //Drop enable to capture command
        MSDelay(15);                       //wait
        x = (command & 0x0F)<< 2;          // shift low nibble to center of byte for Pk5-Pk2
        LCD_DATA =LCD_DATA & ~0x3C;         //clear bits Pk5-Pk2
        LCD_DATA =LCD_DATA | x;             //send low nibble to PORTK
        LCD_CTRL = LCD_CTRL | EN;          //rais enable
        MSDelay(5);
        LCD_CTRL = LCD_CTRL & ~EN;         //drop enable to capture command
        MSDelay(15);
  }
void DATWRT4(unsigned char data)
  {
        unsigned char x;
       
        
        x = (data & 0xF0) >> 2;
        LCD_DATA =LCD_DATA & ~0x3C;                     
        LCD_DATA = LCD_DATA | x;
        MSDelay(1);
        LCD_CTRL = LCD_CTRL | RS;
        MSDelay(1);
        LCD_CTRL = LCD_CTRL | EN;
        MSDelay(1);
        LCD_CTRL = LCD_CTRL & ~EN;
        MSDelay(5);
       
        x = (data & 0x0F)<< 2;
        LCD_DATA =LCD_DATA & ~0x3C;                     
        LCD_DATA = LCD_DATA | x;
        LCD_CTRL = LCD_CTRL | EN;
        MSDelay(1);
        LCD_CTRL = LCD_CTRL & ~EN;
        MSDelay(15);
  }


 void MSDelay(unsigned int itime)
  {
    unsigned int i; unsigned int j;
    for(i=0;i<itime;i++)
      for(j=0;j<4000;j++);
 }
 
 
 
 
 void PRINT(char *a) 
 {
         int i;
        
        for(i=0;i<strlen(a);i++) 
        {
          DATWRT4(*(a+i));
          MSDelay(1);
        }
      
 }
 
